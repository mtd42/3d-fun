<div id="myModal" class="modal">
  <div class="modal-content">
    <span class="close">&times;</span>
    <p id="prop"></p>
  </div>
</div>

<script src="https://threejs.org/build/three.min.js"></script>
<script src="/javascripts/OrbitControls.js"></script>
<script>

    // création du renderer
    const renderer = new THREE.WebGLRenderer();
    document.body.appendChild(renderer.domElement);
    renderer.setSize(window.innerWidth, window.innerHeight);

    // Ombres
    renderer.shadowMap.enabled = true;
    renderer.shadowMap.type = THREE.PCFSoftShadowMap;

    // création de la caméra
    const camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.5, 1000);

    // création de la scène
    const scene = new THREE.Scene();

    // couleur de fond noire
    scene.background = new THREE.Color(0, 0, 0);

    // création du groupe
    const group = new THREE.Group();
    scene.add(group);

    // Création du groupe selectionnables
    const selectionables = new THREE.Group();
    scene.add(selectionables);

    // Initialisation raycasting
    const raycaster = new THREE.Raycaster();

    // --------------------------------------------------------------------------- Paramétrage Lumière
    const light = new THREE.DirectionalLight( 0xaaafff, 2.5, 100 );
    light.position.set( 0, 0, 1 ); 
    light.castShadow = true;
    scene.add( light );

    light.shadow.mapSize.width = 512;
    light.shadow.mapSize.height = 512;
    light.shadow.camera.near = 0.5;
    light.shadow.camera.far = 500;

    // ------------------------------------------------------------------------- FONCTIONS génériques
    function generateAstre(data) {
        const texture = new THREE.TextureLoader().load(data.assets.map);
        const textureNormal = new THREE.TextureLoader().load(data.assets.normalMap);

        const materialData = {
            map: texture,
        }

        const geometry = new THREE.SphereGeometry(data.size.radius, 32, 32);
        const material = data.id === "soleil" ? new THREE.MeshPhongMaterial(materialData) : new THREE.MeshBasicMaterial(materialData);
        const sphere = new THREE.Mesh(geometry, material);

        material.needsUpdate = true;
        sphere.position.x = data.position.x;
        sphere.position.y = data.position.y;
        sphere.rotation.x = Math.PI / 2;
        sphere.name = data.id;
        return sphere;
    }

    function generateEllipse(data) {
        const curve = new THREE.EllipseCurve(
            data.ellipse.ax,  data.ellipse.ay, // ax, aY
            data.ellipse.xRadius, data.ellipse.yRadius, // xRadius, yRadius
            data.ellipse.aStartAngle, data.ellipse.aEndAngle, // aStartAngle, aEndAngle
            data.ellipse.aClockwise, // aClockwise
            data.ellipse.aRotation, // aRotation
        );

        const points = curve.getPoints( 100 );
        const geometry = new THREE.BufferGeometry().setFromPoints( points );

        const material = new THREE.LineBasicMaterial( { color : 0x141414 } );

        const ellipse = new THREE.Line( geometry, material );

        return { ellipse, curve }
    }

    function getSelectionneLePlusProche(position) {
        raycaster.setFromCamera(position, camera);
        const [ { object } ] = raycaster.intersectObjects(selectionables.children);
        return object ? object : {};
    }

    function onMouseClick(event) {
        const position = new THREE.Vector2();

        const domRect = renderer.domElement.getBoundingClientRect();
        position.x = ((event.clientX - domRect.left) / domRect.width) * 2 - 1;
        position.y = - ((event.clientY - domRect.top) / domRect.height) * 2 + 1;

        const closestObject = getSelectionneLePlusProche(position);
        if (closestObject) {
          console.log("Vous avez sélectionné l'objet " + closestObject.name);
          const modal = document.getElementById("myModal");
          const prop = document.getElementById("prop");
          modal.style.display = "block";
          prop.innerHTML = closestObject.name;
        } else {
          console.log("Vous n'avez rien sélectionné");
        };
    }

    function initModal(renderer) {
        const modal = document.getElementById("myModal");
        const [span] = document.getElementsByClassName("close");
        span.onclick = function() {
            modal.style.display = "none";
        }
        renderer.domElement.addEventListener('click', onMouseClick);
    }

    function zoom(document) {
          document.body.addEventListener('wheel', () => event.deltaY > 0 ?  controls.minDistance += 20 : controls.minDistance -= 20);
    }

    function initCameraAndControl(camera, renderer) {
        camera.position.set( 0, 0, 500 );
        const controls = new THREE.OrbitControls(camera, renderer.domElement);
        controls.minDistance = -50;
        return controls;
    }

    // ------------------------------------------------------------------------- Paramétrage SOLEIL

    const data_soleil = {
        id: "soleil",
        assets: {
            map: 'images/sun_color.jpg',
        },
        position: {
            x: 0,
            y: 0,
        },
        size: {
            radius: 4,
        }
    }
    const soleil = generateAstre(data_soleil);
    selectionables.add(soleil);

    // ------------------------------------------------------------------------- Paramétrage MERCURE

    const data_mercure = {
        id: "mercure",
        assets: {
            map: 'images/planetes/mercure/mercurymap.jpg',
            normalMap : 'images/planetes/mercure/mercurybump.jpg'
        },
        position: {
            x: -10,
            y: 0,
        },
        size: {
            radius: 0.50,
        },
        ellipse: {
            ax: 0,
            ay: 0,
            xRadius: 10,
            yRadius: 10,
            aStartAngle: 0,
            aEndAngle: 2 * Math.PI,
            aClockwise: false,
            aRotation: 0,
        }
    }
    const mercure = generateAstre(data_mercure);
    const { ellipse: ellipse_mercure, curve: curve_mercure } = generateEllipse(data_mercure);
    selectionables.add(mercure);
    scene.add(ellipse_mercure);

    // --------------------------------------------------------------------------- Paramétrage VENUS
    const data_venus = {
        id: "venus",
        assets: {
            map: 'images/planetes/venus/venusmap.jpg',
            normalMap : 'images/planetes/venus/venusbump.jpg'
        },
        position: {
            x: -20,
            y: -10,
        },
        size: {
            radius: 1,
        },
        ellipse: {
            ax: 0,
            ay: 0,
            xRadius: 20,
            yRadius: 20,
            aStartAngle: 0,
            aEndAngle: 2 * Math.PI,
            aClockwise: false,
            aRotation: 0,
        }
    }
    const venus = generateAstre(data_venus);
    const { ellipse: ellipse_venus, curve: curve_venus } = generateEllipse(data_venus);
    selectionables.add(venus);
    scene.add(ellipse_venus);

    // --------------------------------------------------------------------------- Paramétrage TERRE
        const data_terre = {
        id: "terre",
        assets: {
            map: 'images/earth_color.jpg',
            normalMap : 'images/earth_normal.jpg'
        },
        position: {
            x: 0,
            y: 0,
        },
        size: {
            radius: 1.50,
        },
        ellipse: {
            ax: 0,
            ay: 0,
            xRadius: 40,
            yRadius: 40,
            aStartAngle: 0,
            aEndAngle: 2 * Math.PI,
            aClockwise: false,
            aRotation: 0,
        }
    }
    const terre = generateAstre(data_terre);
    const { ellipse: ellipse_terre, curve: curve_terre } = generateEllipse(data_terre);
    selectionables.add(terre);
    scene.add(ellipse_terre);

    // --------------------------------------------------------------------------- Paramétrage MARS
    const data_mars = {
        id: "mars",
        assets: {
            map: 'images/planetes/mars/marsmap1k.jpg',
            normalMap : 'images/planetes/mars/marsbump1k.jpg'
        },
        position: {
            x: 0,
            y: 0,
        },
        size: {
            radius: 0.75,
        },
        ellipse: {
            ax: 0,
            ay: 0,
            xRadius: 60,
            yRadius: 60,
            aStartAngle: 0,
            aEndAngle: 2 * Math.PI,
            aClockwise: false,
            aRotation: 0,
        }
    }
    const mars = generateAstre(data_mars);
    const {ellipse: ellipse_mars, curve: curve_mars} = generateEllipse(data_mars);
    selectionables.add(mars);
    scene.add(ellipse_mars);

    // --------------------------------------------------------------------------- Paramétrage JUPITER
    const data_jupiter = {
        id: "jupiter",
        assets: {
            map: 'images/planetes/jupiter/jupitermap.jpg',
        },
        position: {
            x: 0,
            y: 0,
        },
        size: {
            radius: 2.25,
        },
        ellipse: {
            ax: 0,
            ay: 0,
            xRadius: 80,
            yRadius: 80,
            aStartAngle: 0,
            aEndAngle: 2 * Math.PI,
            aClockwise: false,
            aRotation: 0,
        }
    }
    const jupiter = generateAstre(data_jupiter);
    const {ellipse: ellipse_jupiter, curve: curve_jupiter} = generateEllipse(data_jupiter);
    selectionables.add(jupiter);
    scene.add(ellipse_jupiter);

    // --------------------------------------------------------------------------- Paramétrage SATURNE
        const data_saturne = {
        id: "saturne",
        assets: {
            map: 'images/planetes/saturne/saturnmap.jpg',
        },
        position: {
            x: 0,
            y: 0,
        },
        size: {
            radius: 2,
        },
        ellipse: {
            ax: 0,
            ay: 0,
            xRadius: 100,
            yRadius: 100,
            aStartAngle: 0,
            aEndAngle: 2 * Math.PI,
            aClockwise: false,
            aRotation: 0,
        }
    }
    const saturne = generateAstre(data_saturne);
    const { ellipse: ellipse_saturne, curve: curve_saturne } = generateEllipse(data_saturne);
    selectionables.add(saturne);
    scene.add(ellipse_saturne);

    // --------------------------------------------------------------------------- Paramétrage URANUS
    const data_uranus = {
        id: "uranus",
        assets: {
            map: 'images/planetes/uranus/uranusmap.jpg',
        },
        position: {
            x: 0,
            y: 0,
        },
        size: {
            radius: 1.75,
        },
        ellipse: {
            ax: 0,
            ay: 0,
            xRadius: 120,
            yRadius: 120,
            aStartAngle: 0,
            aEndAngle: 2 * Math.PI,
            aClockwise: false,
            aRotation: 0,
        }
    }
    const uranus = generateAstre(data_uranus);
    const {ellipse: ellipse_uranus, curve: curve_uranus} = generateEllipse(data_uranus);
    selectionables.add(uranus);
    scene.add(ellipse_uranus);

    // --------------------------------------------------------------------------- Paramétrage NEPTUNE
    const data_neptune = {
        id: "neptune",
        assets: {
            map: 'images/planetes/neptune/neptunemap.jpg',
        },
        position: {
            x: 0,
            y: 0,
        },
        size: {
            radius: 1.50,
        },
        ellipse: {
            ax: 0,
            ay: 0,
            xRadius: 140,
            yRadius: 140,
            aStartAngle: 0,
            aEndAngle: 2 * Math.PI,
            aClockwise: false,
            aRotation: 0,
        }
    }
    const neptune = generateAstre(data_neptune);
    const { ellipse: ellipse_neptune, curve: curve_neptune } = generateEllipse(data_neptune);
    selectionables.add(neptune);
    scene.add(ellipse_neptune);

    // --------------------------------------------------------------------------- Paramétrage PLUTON
    const data_pluton = {
        id: "pluton",
        assets: {
            map: 'images/planetes/pluton/plutomap1k.jpg',
            normalMap : 'images/planetes/pluton/plutobump1k.jpg'
        },
        position: {
            x: 70,
            y: -80,
        },
        size: {
            radius: 0.50,
        },
        ellipse: {
            ax: 0,
            ay: 0,
            xRadius: 160,
            yRadius: 160,
            aStartAngle: 0,
            aEndAngle: 2 * Math.PI,
            aClockwise: false,
            aRotation: 0,
        }
    }
    const pluton = generateAstre(data_pluton);
    const {ellipse: ellipse_pluton, curve: curve_pluton} = generateEllipse(data_pluton);
    selectionables.add(pluton);
    scene.add(ellipse_pluton);

    // --------------------------------------------------------------------------- Paramétrage GENERAL
    initModal(renderer);
    zoom(document);
    const controls = initCameraAndControl(camera, renderer);

    const vitesse = 10.618;
    let start = null;
    const animate = (t) => {
        if (start === null) {
          start = t;
        }
        const delai = t - start;
        
        curve_mercure.getPoint((delai * vitesse * .0000089) % 1, mercure.position);
        curve_venus.getPoint((delai * vitesse *   .0000079) % 1, venus.position);
        curve_terre.getPoint((delai * vitesse *   .0000069) % 1, terre.position);
        curve_mars.getPoint((delai * vitesse *    .0000059) % 1, mars.position);
        curve_jupiter.getPoint((delai * vitesse * .0000049) % 1, jupiter.position);
        curve_saturne.getPoint((delai * vitesse * .0000039) % 1, saturne.position);
        curve_uranus.getPoint((delai * vitesse *  .0000029) % 1, uranus.position);
        curve_neptune.getPoint((delai * vitesse * .0000019) % 1, neptune.position);
        curve_pluton.getPoint((delai * vitesse *  .0000009) % 1, pluton.position);

        soleil.rotateY(0.01);
        terre.rotateY(0.001);
        jupiter.rotateY(0.001);
        controls.update();

        requestAnimationFrame(animate);
        renderer.render(scene, camera);
    }
    requestAnimationFrame(animate);

</script>